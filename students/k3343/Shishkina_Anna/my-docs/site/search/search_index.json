{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Lr1/task/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f FastAPI</p> <ul> <li>\u042f\u0437\u044b\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438: Python</li> </ul>"},{"location":"Lr1/task/#_1","title":"\u042d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b","text":"<ul> <li>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u0432\u0445\u043e\u0434, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f </li> </ul> <pre><code>@router.post(\"/register\")\ndef register_user(user: UserCreateWithPassword, session: Session = Depends(get_session)):\n    db_user = session.exec(select(User).filter(User.email == user.email)).first()\n    if db_user:\n        raise HTTPException(status_code=400, detail=\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c email \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442\")\n\n    hashed_password = hash_password(user.password)\n    db_user = User(email=user.email, full_name=user.full_name, hashed_password=hashed_password, is_active=True)\n    session.add(db_user)\n    session.commit()\n    session.refresh(db_user)\n    return db_user\n\n@router.post(\"/login\")\ndef login_user(\n    username: str = Form(...),\n    password: str = Form(...),\n    session: Session = Depends(get_session)\n):\n    db_user = session.exec(select(User).filter(User.email == username)).first()\n    if db_user is None or not verify_password(password, db_user.hashed_password):\n        raise HTTPException(status_code=401, detail=\"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 email \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\")\n\n    access_token = create_access_token(data={\"sub\": db_user.email})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n@router.get(\"/me\", response_model=UserRead)\ndef get_me(current_user: User = Depends(get_current_user)):\n    return current_user\n\n@router.put(\"/change_password\")\ndef change_password(new_password: str, current_user: User = Depends(get_current_user), session: Session = Depends(get_session)):\n    hashed_password = hash_password(new_password)\n    current_user.hashed_password = hashed_password\n    session.add(current_user)\n    session.commit()\n    return {\"msg\": \"\u041f\u0430\u0440\u043e\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\"}\n</code></pre> <ul> <li>\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u0442  </li> </ul> <pre><code>@router.post(\"/\", response_model=Category)\ndef create_category(category: Category, session: Session = Depends(get_session), user: User = Depends(get_current_user)):\n    category.user_id = user.id\n    session.add(category)\n    session.commit()\n    session.refresh(category)\n    return category\n\n@router.get(\"/\", response_model=List[Category])\ndef list_categories(session: Session = Depends(get_session), user: User = Depends(get_current_user)):\n    return session.exec(select(Category).filter(Category.user_id == user.id)).all()\n\n@router.put(\"/{category_id}\", response_model=Category)\ndef update_category(category_id: int, updated_category: Category, session: Session = Depends(get_session), user: User = Depends(get_current_user)):\n    category = session.get(Category, category_id)\n    if not category or category.user_id != user.id:\n        raise HTTPException(status_code=404, detail=\"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n    if category.user_id != current_user.id:\n        raise HTTPException(status_code=403, detail=\"\u0423 \u0432\u0430\u0441 \u043d\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\")\n    category.name = updated_category.name\n    session.commit()\n    session.refresh(category)\n    return category\n\n@router.delete(\"/{category_id}\", response_model=Category)\ndef delete_category(category_id: int, session: Session = Depends(get_session), user: User = Depends(get_current_user)):\n    category = session.get(Category, category_id)\n    if not category or category.user_id != user.id:\n        raise HTTPException(status_code=404, detail=\"\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u0430\")\n    if category.user_id != current_user.id:\n        raise HTTPException(status_code=403, detail=\"\u0423 \u0432\u0430\u0441 \u043d\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\")\n    session.delete(category)\n    session.commit()\n    return category\n</code></pre> <ul> <li>\u0421\u0447\u0435\u0442\u0430 </li> </ul> <pre><code>@router.post(\"/\", response_model=Account)\ndef create_account(account: Account, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)):\n    account.user_id = current_user.id\n    session.add(account)\n    session.commit()\n    session.refresh(account)\n    return account\n\n@router.get(\"/\", response_model=List[Account])\ndef list_accounts(session: Session = Depends(get_session), current_user: User = Depends(get_current_user)):\n    return session.exec(select(Account).where(Account.user_id == current_user.id)).all()\n\n@router.put(\"/{account_id}\", response_model=Account)\ndef update_account(\n    account_id: int, \n    account_update: AccountUpdate,\n    session: Session = Depends(get_session),\n    current_user: User = Depends(get_current_user)\n):\n    db_account = session.get(Account, account_id)\n    if not db_account:\n        raise HTTPException(status_code=404, detail=\"\u0421\u0447\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n    if db_account.user_id != current_user.id: #\u0435\u0441\u043b\u0438 \u0432\u0432\u0435\u0434\u0435\u043d \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n        raise HTTPException(status_code=403, detail=\"\u0423 \u0432\u0430\u0441 \u043d\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\")\n\n    # \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0435\u0439\n    if account_update.name is not None:\n        db_account.name = account_update.name\n    if account_update.balance is not None:\n        db_account.balance = account_update.balance\n    if account_update.account_type is not None:\n        db_account.account_type = account_update.account_type\n\n    session.commit()\n    session.refresh(db_account)\n    return db_account\n\n@router.delete(\"/{account_id}\", response_model=Account)\ndef delete_account(account_id: int, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)):\n    db_account = session.get(Account, account_id)\n    if db_account is None:\n        raise HTTPException(status_code=404, detail=\"\u0421\u0447\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\")\n    if db_account.user_id != current_user.id: #\u0435\u0441\u043b\u0438 \u0432\u0432\u0435\u0434\u0435\u043d \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n        raise HTTPException(status_code=403, detail=\"\u0423 \u0432\u0430\u0441 \u043d\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u0430\")\n    session.delete(db_account)\n    session.commit()\n    return db_account\n</code></pre> <ul> <li>\u0411\u044e\u0434\u0436\u0435\u0442 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u0442 </li> </ul> <pre><code>@router.post(\"/\", response_model=Budget)\ndef create_budget(budget: Budget, session: Session = Depends(get_session), current_user: User = Depends(get_current_user)):\n    budget.user_id = current_user.id\n    session.add(budget)\n    session.commit()\n    session.refresh(budget)\n    return budget\n\n@router.get(\"/\", response_model=List[Budget])\ndef list_budgets(session: Session = Depends(get_session), current_user: User = Depends(get_current_user)):\n    return session.exec(select(Budget).where(Budget.user_id == current_user.id)).all()\n\n@router.get(\"/budget_status\")\ndef check_budget_status(session: Session = Depends(get_session)):\n    budgets = session.exec(select(Budget)).all()\n    transactions = session.exec(select(Transaction)).all()\n\n    category_expenses = {}\n    for t in transactions:\n        if t.type == TransactionType.expense:\n            category_expenses[t.category_id] = category_expenses.get(t.category_id, 0) + t.amount\n\n    alerts = []\n    for b in budgets:\n        spent = category_expenses.get(b.category_id, 0)\n        if spent &gt; b.amount:\n            alerts.append(f\"\u041f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0431\u044e\u0434\u0436\u0435\u0442\u0430 \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 ID {b.category_id}: \u043f\u043e\u0442\u0440\u0430\u0447\u0435\u043d\u043e {spent}, \u043b\u0438\u043c\u0438\u0442 {b.amount}\")\n\n    return {\"alerts\": alerts}\n</code></pre> <ul> <li>\u041e\u0442\u0447\u0451\u0442\u044b </li> </ul> <pre><code>@router.get(\"/\")\ndef get_report(session: Session = Depends(get_session)):\n    transactions = session.exec(select(Transaction)).all()\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0441\u0435 \u0434\u043e\u0445\u043e\u0434\u044b \u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u044b\n    total_income = sum(t.amount for t in transactions if t.type == TransactionType.income)\n    total_expense = sum(t.amount for t in transactions if t.type == TransactionType.expense)\n    return {\n        \"total_income\": total_income,\n        \"total_expense\": total_expense,\n        \"balance\": total_income - total_expense\n    }\n\n@router.get(\"/detailed_report\")\ndef get_detailed_report(session: Session = Depends(get_session)):\n    transactions = session.exec(select(Transaction)).all()\n    # \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e \u0438 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\n    for t in transactions:\n        if t.category_id:\n            t.category = session.get(Category, t.category_id)\n        if t.account_id:\n            t.account = session.get(Account, t.account_id)\n\n    report = {\n        \"total_income\": sum(t.amount for t in transactions if t.type == TransactionType.income),\n        \"total_expense\": sum(t.amount for t in transactions if t.type == TransactionType.expense),\n        \"balance\": sum(t.amount for t in transactions if t.type == TransactionType.income) - \n                 sum(t.amount for t in transactions if t.type == TransactionType.expense),\n        \"transactions\": [\n            {\n                \"id\": t.id,\n                \"amount\": t.amount,\n                \"date\": t.date,\n                \"description\": t.description,\n                \"type\": t.type,\n                \"category_name\": t.category.name if hasattr(t, 'category') and t.category else None, # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n                \"account_name\": t.account.name if hasattr(t, 'account') and t.account else None, # \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0447\u0451\u0442\u0430\n            }\n            for t in transactions\n        ]\n    }\n    return report\n</code></pre>"},{"location":"Lr1/task/#_2","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code># \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\n\nclass UserBase(SQLModel):\n    email: EmailStr\n    full_name: Optional[str] = None\n\n\nclass User(UserBase, table=True):\n    __tablename__ = \"users\"\n    id: Optional[int] = Field(default=None, primary_key=True)\n    hashed_password: str\n    is_active: bool = True\n\n    transactions: List[\"Transaction\"] = Relationship(back_populates=\"user\")\n    budgets: List[\"Budget\"] = Relationship(back_populates=\"user\")\n    categories: List[\"Category\"] = Relationship(back_populates=\"user\")\n    accounts: List[\"Account\"] = Relationship(back_populates=\"user\")\n\n# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0442\u0440\u0430\u0442\nclass Category(SQLModel, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    name: str\n\n    user_id: int = Field(foreign_key=\"users.id\")\n    user: Optional[User] = Relationship(back_populates=\"categories\")\n\n    budgets: List[\"Budget\"] = Relationship(back_populates=\"category\")\n    transactions: List[\"Transaction\"] = Relationship(back_populates=\"category\")\n\n# \u0421\u0447\u0435\u0442\u0430\nclass AccountType(str, Enum):\n    checking = \"checking\"  # \u0420\u0430\u0441\u0447\u0435\u0442\u043d\u044b\u0439 \u0441\u0447\u0435\u0442\n    savings = \"savings\"    # \u0421\u0431\u0435\u0440\u0435\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0447\u0435\u0442\n    credit = \"credit\"      # \u041a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0441\u0447\u0435\u0442\n\n\nclass AccountBase(SQLModel):\n    user_id: int\n    name: str  \n    balance: float = 0.0 \n    account_type: AccountType\n\n\nclass Account(AccountBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n    user_id: int = Field(foreign_key=\"users.id\")\n    user: Optional[User] = Relationship(back_populates=\"accounts\")\n    transactions: List[\"Transaction\"] = Relationship(back_populates=\"account\")\n\nclass AccountUpdate(SQLModel):\n    name: Optional[str] = None\n    balance: Optional[float] = None\n    account_type: Optional[AccountType] = None\n\n# \u0422\u0440\u0430\u043d\u0437\u0430\u043a\u0446\u0438\u0438\nclass TransactionType(str, Enum):\n    income = \"income\" # \u0434\u043e\u0445\u043e\u0434\n    expense = \"expense\" # \u0440\u0430\u0441\u0445\u043e\u0434\n\nclass TransactionBase(SQLModel):\n    amount: float\n    date: date\n    description: Optional[str] = None\n    type: TransactionType\n    category_id: Optional[int] = Field(default=None, foreign_key=\"category.id\")\n    account_id: Optional[int] = Field(default=None, foreign_key=\"account.id\")\n\nclass Transaction(TransactionBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    user_id: int = Field(foreign_key=\"users.id\")\n    user: Optional[User] = Relationship(back_populates=\"transactions\")\n\n    category: Optional[Category] = Relationship(back_populates=\"transactions\")\n    account: Optional[Account] = Relationship(back_populates=\"transactions\")\n\n\nUser.accounts = Relationship(back_populates=\"user\")\nTransaction.account = Relationship(back_populates=\"transactions\")\n\n# \u0411\u044e\u0434\u0436\u0435\u0442 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\nclass BudgetBase(SQLModel):\n    user_id: int\n    amount: float\n    category_id: Optional[int] = Field(default=None, foreign_key=\"category.id\")\n\n\nclass Budget(BudgetBase, table=True):\n    id: Optional[int] = Field(default=None, primary_key=True)\n\n    user_id: int = Field(foreign_key=\"users.id\")\n    user: Optional[User] = Relationship(back_populates=\"budgets\")\n\n    category: Optional[Category] = Relationship(back_populates=\"budgets\")\n\nclass UserCreate(UserBase):\n    password: str\n\nclass UserRead(UserBase):\n    id: int\n    is_active: bool\n\nclass UserCreateWithPassword(UserCreate):\n    password: str\n</code></pre>"},{"location":"Lr1/task/#_3","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","text":"<pre><code>uvicorn main:app --reload\n</code></pre>"}]}